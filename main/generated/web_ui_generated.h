// Auto-generated by ui_generator.py
// Generated at: 2025-06-23T20:20:12.778274
// DO NOT EDIT - changes will be overwritten

#pragma once

#include <pgmspace.h>

// Complete HTML page
const char INDEX_HTML[] PROGMEM = R"rawhtml(<!DOCTYPE html><html><head><meta charset="UTF-8"><meta name="viewport" content="width=device-width,initial-scale=1"><title>ModESP Control Panel</title><style>body{font-family:sans-serif;margin:0;padding:20px;background:#f0f0f0}
.module{background:white;border-radius:8px;padding:20px;margin-bottom:20px;box-shadow:0 2px 4px rgba(0,0,0,0.1)}
.module h2{margin-top:0;color:#333}
.control{margin:15px 0}
.control label{display:block;margin-bottom:5px;font-weight:bold}
.gauge{width:200px;height:100px;background:#eee;border-radius:4px;position:relative}
.value{font-size:24px;text-align:center;padding:20px}
input,select{width:100%;padding:8px;border:1px solid #ddd;border-radius:4px}
.switch{width:60px;height:30px;background:#ccc;border-radius:15px;position:relative;cursor:pointer}
.switch.on{background:#4CAF50}</style></head><body><div id="app"><div class="module" data-module="sensor_drivers"><h2>Sensors</h2><div class="control"><label>Temperature</label><div class="gauge" data-bind="temperature"><div class="value">--</div></div></div><div class="control"><label>Humidity</label><div class="gauge" data-bind="humidity"><div class="value">--</div></div></div><div class="control"><label>Door Status</label><div class="switch" data-bind="door_open"></div></div><div class="control"><label>Temp Calibration</label><input type="number" data-bind="temp_offset" min="-5" max="5" step="0.1" data-write-method="sensor.set_temp_offset"></div></div></div><script>
// Auto-generated UI updater
const API_ENDPOINT = '/api/data';
const UPDATE_INTERVAL = 1000;

function updateUI() {
    fetch(API_ENDPOINT)
        .then(r => r.json())
        .then(data => {
            for (const [key, value] of Object.entries(data)) {
                const el = document.querySelector(`[data-bind="${key}"]`);
                if (el) {
                    if (el.tagName === 'INPUT' || el.tagName === 'SELECT') {
                        el.value = value;
                    } else {
                        el.textContent = value;
                    }
                }
            }
        })
        .catch(err => console.error('Update failed:', err));
}

// Handle control changes
document.addEventListener('change', (e) => {
    if (e.target.dataset.writeMethod) {
        const method = e.target.dataset.writeMethod;
        const value = e.target.type === 'checkbox' ? e.target.checked : e.target.value;
        
        fetch('/api/rpc', {
            method: 'POST',
            headers: {'Content-Type': 'application/json'},
            body: JSON.stringify({
                method: method,
                params: {value: value}
            })
        });
    }
});

// Start updates
setInterval(updateUI, UPDATE_INTERVAL);
updateUI();
</script></body></html>)rawhtml";

// UI element mapping
struct UIElementMap {
    const char* element_id;
    const char* rpc_method;
    const char* state_key;
};

const UIElementMap UI_ELEMENT_MAP[] PROGMEM = {
    {"sensor_drivers_temperature", "sensor.get_temperature", "sensor_drivers.temperature"},
    {"sensor_drivers_humidity", "sensor.get_humidity", "sensor_drivers.humidity"},
    {"sensor_drivers_door_open", "sensor.get_door_status", "sensor_drivers.door_open"},
    {"sensor_drivers_temp_offset", "sensor.get_temp_offset", "sensor_drivers.temp_offset"},
};

const size_t UI_ELEMENT_COUNT = sizeof(UI_ELEMENT_MAP) / sizeof(UIElementMap);
