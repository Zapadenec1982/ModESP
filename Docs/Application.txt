Application - Complete Reference
Overview & Architecture
What is Application?
Application is the central lifecycle coordinator for ModuChill system. It manages initialization sequence, main loop execution, health monitoring, and graceful shutdown. The component ensures deterministic startup and stable runtime operation.
Core Responsibilities
* Lifecycle Management: BOOT → INIT → RUNNING → ERROR/SHUTDOWN states
* Main Loop Coordination: Fixed 100Hz execution with time budgets
* Resource Monitoring: Heap, CPU, stack usage tracking
* Error Handling: Classification, recovery strategies, degradation
* Health Monitoring: System-wide health checks and reporting
Architecture Principles
* Deterministic Init: Fixed initialization order respecting dependencies
* Fixed-Rate Execution: 100Hz main loop for predictable timing
* Single Main Task: All module updates in one thread for simplicity
* Graceful Degradation: System continues without non-critical components
* Resource Bounded: All operations have time/memory limits
Memory Footprint
* Static allocation: 128-256B
* Stack usage: 8KB for main task
* No dynamic allocation after init
State Machine & Lifecycle
System States
BOOT (0-10ms)
├── Hardware initialization (NVS, GPIO, UART)
├── System clock configuration
├── Watchdog setup
└── Boot diagnostics
INIT (10-200ms)
├── Core services initialization
├── Configuration loading
├── Module registration
├── Module initialization (by priority)
└── State validation
RUNNING (Normal operation)
├── Main loop @ 100Hz
├── Module updates (8ms budget)
├── Event processing (2ms budget)
├── Health monitoring (1Hz)
└── Watchdog feeding
ERROR (Recovery mode)
├── Error classification
├── Recovery attempts
├── Component disabling
├── Degraded operation
└── Restart if critical
SHUTDOWN (Graceful stop)
├── Stop new operations
├── Complete pending work
├── Save persistent state
├── Module shutdown (reverse order)
└── Resource cleanup
State Transitions
* BOOT → INIT: Automatic after hardware ready
* INIT → RUNNING: All critical services initialized
* RUNNING → ERROR: Critical component failure
* ERROR → RUNNING: Successful recovery
* ANY → SHUTDOWN: Shutdown request
* ERROR → BOOT: Restart after fatal error
Initialization Sequence (Critical Order)
1. Hardware Layer: NVS, GPIO, UART, Clocks
2. Core Services: EventBus, SharedState (no dependencies)
3. Configuration: Load from NVS (depends on Core)
4. HAL Layer: Hardware abstraction (depends on Config)
5. Module Manager: Registry setup (depends on Core)
6. UIManager: Initialization of the central UI coordinator.
7. Modules: Initialize by priority (depends on all above)
Order Violation = Undefined Behavior
Complete API Reference
Lifecycle Control
* init() - One-time initialization, call from app_main()
* run() - Start main loop, blocks forever
* shutdown() - Request graceful shutdown
* restart() - Request system restart
State Management
* get_state() - Current state (BOOT/INIT/RUNNING/ERROR/SHUTDOWN)
* is_running() - Quick check if operational
Main Loop Architecture
Loop Structure (10ms cycle @ 100Hz)
while (is_running()) {
   start_time = now();
   
   // 1. Update all modules (8ms budget)
   ModuleManager::tick_all(8);
   
   // 2. Process events (2ms budget)  
   EventBus::process(2);
   
   // ... other tasks ...
}

(Решта документа без змін)