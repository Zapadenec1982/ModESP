SensorModule - Довідник (оновлена версія)
Що це і навіщо
SensorModule — це спеціалізований HAL-модуль, що відповідає за взаємодію з усіма фізичними датчиками в системі. Його головна задача — зчитувати свою конфігурацію, отримувати від ModuchillHAL необхідні драйвери, періодично збирати з них показники та публікувати ці дані у стандартизованому вигляді в SharedState.
Він діє як єдина точка відповідальності за "відчуття" системи, повністю ізолюючи бізнес-логіку від конфігурації апаратного забезпечення.
Основні принципи
* Дворівнева конфігурація: SensorModule працює зі своїм файлом конфігурації (sensors.json), яка посилається на логічні ідентифікатори HAL (hal_id). Сам ModuchillHAL вже відповідає за зіставлення цих hal_id з фізичними пінами з BoardConfig.h.
* Агрегація та опитування: SensorModule керує списком усіх сконфігурованих датчиків і періодично опитує їх у своєму методі update().
* Стандартизація даних: Незалежно від типу датчика, SensorModule публікує дані в SharedState за єдиним форматом.
* Ізоляція: Модулі бізнес-логіки (напр. ClimateControl) нічого не знають про типи датчиків, їхні hal_id чи частоту опитування. Вони просто споживають готові дані з SharedState.
Структура та Конфігурація
SensorModule під час ініціалізації читає свою секцію з ConfigManager.
Приклад файлу sensors.json:
{
 "poll_interval_ms": 2000,
 "sensors": [
   {
     "role": "chamber_temp",
     "type": "DS18B20",
     "hal_id": "ONEWIRE_BUS_1",
     "address": "28ff640264013c28",
     "publish_key": "state.sensor.chamber_temp"
   },
   {
     "role": "evaporator_temp",
     "type": "NTC_10K",
     "hal_id": "ADC_INPUT_2",
     "series_resistor": 10000,
     "publish_key": "state.sensor.evaporator_temp"
   },
   {
     "role": "door_open",
     "type": "GPIO_INPUT",
     "hal_id": "GPIO_INPUT_4",
     "publish_key": "state.input.door_open"
   }
 ]
}

* poll_interval_ms: Як часто опитувати датчики.
* sensors: Масив об'єктів, що описують кожен датчик.
   * role: Логічна роль датчика в системі.
   * type: Вказує, який тип драйвера використовувати (DS18B20, NTC_10K).
   * hal_id: Логічний ідентифікатор ресурсу в HAL. SensorModule буде використовувати цей ID, щоб отримати від ModuchillHAL доступ до потрібної шини або піна.
   * address, series_resistor: Параметри, специфічні для драйвера.
   * publish_key: Ключ в SharedState, за яким будуть публікуватися дані.
Патерн роботи
1. Ініціалізація (init()):
   * Читає свою JSON-конфігурацію.
   * Проходить по масиву sensors.
   * Для кожного запису:
      * Звертається до ModuchillHAL з hal_id, щоб отримати об'єкт-драйвер для роботи з відповідним апаратним ресурсом (наприклад, об'єкт шини 1-Wire або каналу АЦП).
      * Створює внутрішній об'єкт, що представляє датчик, передаючи йому отриманий драйвер та специфічні параметри (address, series_resistor).
      * Зберігає готовий об'єкт датчика у внутрішньому списку.
2. Оновлення (update()):
   * Метод викликається ModuleManager-ом.
   * SensorModule перевіряє, чи не настав час для наступного опитування (згідно poll_interval_ms).
   * Якщо час настав, він проходить по списку своїх об'єктів датчиків і викликає їхні методи читання даних (getTemperature(), getState()).
   * Отриманий результат (значення та статус) він публікує в SharedState за ключем, вказаним у publish_key.
Формат даних у SharedState
Для забезпечення консистентності, SensorModule публікує дані у вигляді JSON-об'єкта з однаковою структурою:
// Приклад для ключа "state.sensor.chamber_temp"
{
 "value": 4.5,
 "status": "ok",
 "timestamp": 1677654321
}

* value: Значення датчика (число, true/false).
* status: Статус читання ("ok", "error", "disconnected"). Це дозволяє логічним модулям реагувати на несправності.
* timestamp: Час останнього успішного читання.
Модулі бізнес-логіки завжди повинні перевіряти поле status перед тим, як використовувати value.
Обробка помилок
* Якщо драйвер повертає помилку (напр., датчик не знайдено, помилка CRC), SensorModule не оновлює поле value в SharedState.
* Натомість він оновлює поле status, встановлюючи його в "error" або інший відповідний стан.
* Додатково, він викликає Application::report_error(), щоб помилка була залогована, а health_score самого SensorModule знизився.
Межі відповідальності
SensorModule відповідає за:
* Керування життєвим циклом драйверів датчиків на основі конфігурації.
* Періодичне опитування апаратури через HAL.
* Перетворення сирих даних у стандартизований формат.
* Публікацію даних та статусу їх зчитування в SharedState.
SensorModule НЕ відповідає за:
* Знання про фізичні піни (це відповідальність HAL).
* Інтерпретацію даних (це робить бізнес-логіка, напр. ClimateControl).
* Керування актуаторами (це роблять інші HAL-модулі).